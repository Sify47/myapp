import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart'; // Import FCM
import 'package:myapp/constants/colors.dart';
import 'package:provider/provider.dart';
import 'auth_model.dart';
import 'pages/splash_screen.dart';
import 'services/brand_se.dart';
import 'theme/theme_provider.dart';
import 'services/cart_service.dart'; // Import CartService
import 'services/order_service.dart'; // Import OrderService
import 'services/coupon_service.dart'; // Import CouponService
import 'services/wishlist_service.dart'; // Import WishlistService
import 'services/review_service.dart'; // Import ReviewService
import 'services/notification_service.dart'; // Import NotificationService
import 'firebase_options.dart'; // Make sure you have firebase_options.dart generated by FlutterFire CLI
import 'package:cloudinary_flutter/cloudinary_context.dart';
// import 'package:flutter_localizations/flutter_localizations.dart';

// Background message handler (must be top-level)
@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  // Initialize Firebase if needed (usually done in main)
  // await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  print("Handling a background message: ${message.messageId}");
  // You might want to show a local notification here
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  // Set the background messaging handler
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  // Initialize NotificationService (but don't call initialize() here yet if it depends on Auth)
  final notificationService = NotificationService();

  runApp(MyApp(notificationService: notificationService));
}

class MyApp extends StatelessWidget {
  final NotificationService notificationService;

  const MyApp({super.key, required this.notificationService});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => ThemeProvider()),
        ChangeNotifierProvider(create: (_) => AuthModel()), // AuthModel first
        Provider(create: (_) => CartService()),
        Provider(create: (_) => BrandService()),
        Provider(create: (_) => OrderService()),
        Provider(create: (_) => CouponService()),
        Provider(create: (_) => WishlistService()),
        Provider(create: (_) => ReviewService()),
        Provider(
          create: (_) => notificationService,
        ), // Provide NotificationService
        // Initialize NotificationService after AuthModel is available
        ChangeNotifierProxyProvider<AuthModel, ValueNotifier<bool>>(
          create: (_) => ValueNotifier<bool>(false), // Dummy notifier
          update: (context, auth, previous) {
            if (auth.isLoggedIn) {
              // Initialize notifications only when user is logged in
              // This ensures we have a user ID to save the token
              notificationService.initialize();
            }
            // We don't actually need to return a useful notifier here,
            // just using this provider to trigger initialization.
            return previous!;
          },
        ),
      ],
      child: Consumer<ThemeProvider>(
        builder: (context, themeProvider, child) {
          return MaterialApp(
            title: 'Dolabk',
            theme: ThemeData(
              primarySwatch: Colors.blue,
              scaffoldBackgroundColor:
                  AppColors.backgroundColor, // هنا تحدد خلفية بيضاء
              // visualDensity: VisualDensity.adaptivePlatformDensity,
              fontFamily: 'Cairo',
              appBarTheme: const AppBarTheme(
                backgroundColor: Color(0xFF3366FF),
                foregroundColor: Colors.white,
                elevation: 1,
              ),
              elevatedButtonTheme: ElevatedButtonThemeData(
                style: ElevatedButton.styleFrom(
                  backgroundColor: Color(0xFF3366FF),
                  foregroundColor: Colors.white,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
              ),
            ),

            // darkTheme: ThemeData.dark().copyWith(
            //   scaffoldBackgroundColor: Colors.white, // لون خلفية واضح للوضع الداكن
            // ),
            themeMode: themeProvider.themeMode,
            home: const SplashScreen(),
            debugShowCheckedModeBanner: false,
          );
        },
      ),
    );
  }
}
